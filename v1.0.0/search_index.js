var documenterSearchIndex = {"docs":
[{"location":"#BasicDataLoaders","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"","category":"section"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"Julia package providing a simple data loader to train machine learning systems.","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"The source code of the project is available on github.","category":"page"},{"location":"#Authors","page":"BasicDataLoaders","title":"Authors","text":"","category":"section"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"Lucas Ondel, Brno University of Technology, 2020","category":"page"},{"location":"#Installation","page":"BasicDataLoaders","title":"Installation","text":"","category":"section"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"pkg> add BasicDataLoaders","category":"page"},{"location":"#API","page":"BasicDataLoaders","title":"API","text":"","category":"section"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"The package provide a simple data loader object:","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"DataLoader","category":"page"},{"location":"#BasicDataLoaders.DataLoader","page":"BasicDataLoaders","title":"BasicDataLoaders.DataLoader","text":"struct DataLoader\n    data\n    batchsize\nend\n\nConstructor\n\nDataLoader(data[, batchsize = 1, preprocess = x -> x])\n\nwhere data is a sequence of elements to iterate over, batchsize is the size of each batch and preprocess is a user-defined function to apply on each batch. By default, preprocess is simpy the identity function.\n\nwarning: Warning\nWhen iterating, the final batch may have a size smaller than batchsize.\n\n\n\n\n\n","category":"type"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"note: Note\nDataLoder supports the iterating and indexing interface and, consequently, it can be used in distributed for loops.","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"Because it is very common for data loaders to load data from disk, the package also provides two convenience functions to  easily read and write files:","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"save\nload","category":"page"},{"location":"#BasicDataLoaders.save","page":"BasicDataLoaders","title":"BasicDataLoaders.save","text":"save(path, obj)\n\nWrite obj to file path in the BSON format. The intermediate directories are created if they do not exists. If path does not end with the extension \".bson\", the extension is appended to the output path. The function returns the type of the object saved. See load to load this file again.\n\n\n\n\n\n","category":"function"},{"location":"#BasicDataLoaders.load","page":"BasicDataLoaders","title":"BasicDataLoaders.load","text":"load(path)\n\nLoad a julia object saved in path with the function save. If path does not end with thex extension \".bson\", the extension is appended to input path.\n\n\n\n\n\n","category":"function"},{"location":"#Examples","page":"BasicDataLoaders","title":"Examples","text":"","category":"section"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"Here is a complete example that simply print the batches:","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"julia> using BasicDataLoaders\n\njulia> dl = DataLoader(1:10, batchsize = 3)\nDataLoader{UnitRange{Int64}}\n  data: UnitRange{Int64}\n  batchsize: 3\n\njulia> for batch in dl println(batch) end\n1:3\n4:6\n7:9\n10:10","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"Here is another example that computes the sum of all even numbers between 2 and 200 included:","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"julia> using BasicDataLoaders\n\njulia> dl = DataLoader(1:100, batchsize = 10, preprocess = x -> 2*x)\nDataLoader{UnitRange{Int64}}\n  data: UnitRange{Int64}\n  batchsize: 10\n\njulia> sum(sum(batch) for batch in dl)\n10100","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"Finally, here is an example simulating loading data from files. In practice, you can replace the printing function with the load function.","category":"page"},{"location":"","page":"BasicDataLoaders","title":"BasicDataLoaders","text":"julia> using BasicDataLoaders\n\njulia> files = [\"file1.bson\", \"file2.bson\", \"file3.bson\"]\n3-element Array{String,1}:\n \"file1.bson\"\n \"file2.bson\"\n \"file3.bson\"\n\njulia> dl = DataLoader(files, batchsize = 2, preprocess = x -> println(\"load and merge files $x\"))\nDataLoader{Array{String,1}}\n  data: Array{String,1}\n  batchsize: 2\n\njulia> for batch in dl println(\"do something on this batch\") end\nload and merge files [\"file1.bson\", \"file2.bson\"]\ndo something on this batch\nload and merge files [\"file3.bson\"]\ndo something on this batch","category":"page"}]
}
